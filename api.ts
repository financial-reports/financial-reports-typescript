/* tslint:disable */
/* eslint-disable */
/**
 * Financial Reports API
 * API for accessing company filings, financial data, industry classifications, and related information.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@financialreports.eu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * Provides a detailed representation of a Company.
 * @export
 * @interface Company
 */
export interface Company {
    /**
     * Unique identifier for the company.
     * @type {number}
     * @memberof Company
     */
    'id': number;
    /**
     * Company name.
     * @type {string}
     * @memberof Company
     */
    'name': string;
    /**
     * Legal Entity Identifier (ISO 17442).
     * @type {string}
     * @memberof Company
     */
    'lei': string;
    /**
     * ISO 3166-1 alpha-2 country code of the company\'s primary registration or headquarters.
     * @type {string}
     * @memberof Company
     */
    'country_code': string;
    /**
     * Company\'s GICS Sector classification.
     * @type {Sector}
     * @memberof Company
     */
    'sector': Sector;
    /**
     * Company\'s GICS Industry Group classification.
     * @type {IndustryGroup}
     * @memberof Company
     */
    'industry_group': IndustryGroup;
    /**
     * Company\'s GICS Industry classification.
     * @type {Industry}
     * @memberof Company
     */
    'industry': Industry;
    /**
     * Company\'s GICS Sub-Industry classification.
     * @type {SubIndustry}
     * @memberof Company
     */
    'sub_industry': SubIndustry;
    /**
     * Link to the company\'s Investor Relations page.
     * @type {string}
     * @memberof Company
     */
    'ir_link': string;
    /**
     * Link to the company\'s main homepage.
     * @type {string}
     * @memberof Company
     */
    'homepage_link': string;
    /**
     * Date the company first became public.
     * @type {string}
     * @memberof Company
     */
    'date_public': string;
    /**
     * Date of the company\'s Initial Public Offering.
     * @type {string}
     * @memberof Company
     */
    'date_ipo': string;
    /**
     * Primary stock exchange where the company is listed.
     * @type {string}
     * @memberof Company
     */
    'main_stock_exchange': string;
    /**
     * Facebook profile/page identifier.
     * @type {string}
     * @memberof Company
     */
    'social_facebook': string;
    /**
     * Instagram profile identifier.
     * @type {string}
     * @memberof Company
     */
    'social_instagram': string;
    /**
     * Twitter handle (without @).
     * @type {string}
     * @memberof Company
     */
    'social_twitter': string;
    /**
     * LinkedIn company page identifier/URL path.
     * @type {string}
     * @memberof Company
     */
    'social_linkedin': string;
    /**
     * YouTube channel identifier.
     * @type {string}
     * @memberof Company
     */
    'social_youtube': string;
    /**
     * TikTok profile identifier.
     * @type {string}
     * @memberof Company
     */
    'social_tiktok': string;
    /**
     * Pinterest profile identifier.
     * @type {string}
     * @memberof Company
     */
    'social_pinterest': string;
    /**
     * Xing company profile identifier.
     * @type {string}
     * @memberof Company
     */
    'social_xing': string;
    /**
     * Glassdoor company identifier.
     * @type {string}
     * @memberof Company
     */
    'social_glassdoor': string;
    /**
     * Year the company was founded.
     * @type {number}
     * @memberof Company
     */
    'year_founded': number;
    /**
     * Identifier for a corporate video (e.g., YouTube ID).
     * @type {string}
     * @memberof Company
     */
    'corporate_video_id': string;
    /**
     * Geographical area served by the company.
     * @type {string}
     * @memberof Company
     */
    'served_area': string;
    /**
     * Approximate number of employees.
     * @type {number}
     * @memberof Company
     */
    'headcount': number;
    /**
     * General contact email address.
     * @type {string}
     * @memberof Company
     */
    'contact_email': string;
    /**
     * Primary stock ticker symbol.
     * @type {string}
     * @memberof Company
     */
    'ticker': string;
    /**
     * Indicates if the company is currently publicly listed.
     * @type {boolean}
     * @memberof Company
     */
    'is_listed': boolean;
}
/**
 * Provides a minimal representation of a Company, suitable for nesting.
 * @export
 * @interface CompanyMinimal
 */
export interface CompanyMinimal {
    /**
     * Unique identifier for the company.
     * @type {number}
     * @memberof CompanyMinimal
     */
    'id': number;
    /**
     * Company name.
     * @type {string}
     * @memberof CompanyMinimal
     */
    'name': string;
    /**
     * Legal Entity Identifier (ISO 17442).
     * @type {string}
     * @memberof CompanyMinimal
     */
    'lei': string;
    /**
     * GICS Sub-Industry code classifying the company.
     * @type {string}
     * @memberof CompanyMinimal
     */
    'sub_industry_code': string;
    /**
     * ISO 3166-1 alpha-2 country code of the company\'s primary registration or headquarters.
     * @type {string}
     * @memberof CompanyMinimal
     */
    'country_code': string;
}
/**
 * Serializer for regulatory filings.
 * @export
 * @interface Filing
 */
export interface Filing {
    /**
     * Unique identifier for the filing.
     * @type {number}
     * @memberof Filing
     */
    'id': number;
    /**
     * Basic details of the company that made the filing.
     * @type {CompanyMinimal}
     * @memberof Filing
     */
    'company': CompanyMinimal;
    /**
     * Details of the filing type.
     * @type {FilingType}
     * @memberof Filing
     */
    'filing_type': FilingType;
    /**
     * Language of the filing document.
     * @type {Language}
     * @memberof Filing
     */
    'language': Language;
    /**
     * The official date the document was filed.
     * @type {string}
     * @memberof Filing
     */
    'filing_date': string;
    /**
     * Title of the filing document.
     * @type {string}
     * @memberof Filing
     */
    'title': string;
    /**
     * Timestamp when the filing was added to our system (UTC).
     * @type {string}
     * @memberof Filing
     */
    'added_to_platform': string;
    /**
     * Timestamp when the filing record was last updated (UTC).
     * @type {string}
     * @memberof Filing
     */
    'updated_date': string;
    /**
     * Timestamp when the filing was disseminated by the source (UTC).
     * @type {string}
     * @memberof Filing
     */
    'dissemination_datetime': string;
    /**
     * Timestamp when the filing was released (e.g., for press releases) (UTC).
     * @type {string}
     * @memberof Filing
     */
    'release_datetime': string;
    /**
     * Source from which the filing was obtained.
     * @type {Source}
     * @memberof Filing
     */
    'source': Source;
    /**
     * URL link to the primary filing document (e.g., PDF, HTML).
     * @type {string}
     * @memberof Filing
     */
    'document': string;
    /**
     * The financial year the filing pertains to.
     * @type {number}
     * @memberof Filing
     */
    'year': number;
}
/**
 * Serializer for FilingType model, representing the type of a regulatory filing.
 * @export
 * @interface FilingType
 */
export interface FilingType {
    /**
     * Unique code identifying the filing type.
     * @type {string}
     * @memberof FilingType
     */
    'code': string;
    /**
     * Human-readable name of the filing type.
     * @type {string}
     * @memberof FilingType
     */
    'name': string;
    /**
     * Detailed description of the filing type.
     * @type {string}
     * @memberof FilingType
     */
    'description': string;
}
/**
 * Serializer for GICS Industry classification, including its parent Industry Group.
 * @export
 * @interface Industry
 */
export interface Industry {
    /**
     * GICS Industry code.
     * @type {string}
     * @memberof Industry
     */
    'code': string;
    /**
     * GICS Industry name.
     * @type {string}
     * @memberof Industry
     */
    'name': string;
    /**
     * Parent GICS Industry Group.
     * @type {IndustryGroup}
     * @memberof Industry
     */
    'industry_group': IndustryGroup;
}
/**
 * Serializer for GICS Industry Group classification, including its parent Sector.
 * @export
 * @interface IndustryGroup
 */
export interface IndustryGroup {
    /**
     * GICS Industry Group code.
     * @type {string}
     * @memberof IndustryGroup
     */
    'code': string;
    /**
     * GICS Industry Group name.
     * @type {string}
     * @memberof IndustryGroup
     */
    'name': string;
    /**
     * Parent GICS Sector.
     * @type {Sector}
     * @memberof IndustryGroup
     */
    'sector': Sector;
}
/**
 * Serializer for Language model, representing the language of a document.
 * @export
 * @interface Language
 */
export interface Language {
    /**
     * ISO 639-1 language code (lowercase).
     * @type {string}
     * @memberof Language
     */
    'code': string;
    /**
     * Name of the language.
     * @type {string}
     * @memberof Language
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface PaginatedCompanyList
 */
export interface PaginatedCompanyList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedCompanyList
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedCompanyList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedCompanyList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<Company>}
     * @memberof PaginatedCompanyList
     */
    'results': Array<Company>;
}
/**
 * 
 * @export
 * @interface PaginatedFilingList
 */
export interface PaginatedFilingList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedFilingList
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedFilingList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedFilingList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<Filing>}
     * @memberof PaginatedFilingList
     */
    'results': Array<Filing>;
}
/**
 * 
 * @export
 * @interface PaginatedFilingTypeList
 */
export interface PaginatedFilingTypeList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedFilingTypeList
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedFilingTypeList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedFilingTypeList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<FilingType>}
     * @memberof PaginatedFilingTypeList
     */
    'results': Array<FilingType>;
}
/**
 * 
 * @export
 * @interface PaginatedIndustryGroupList
 */
export interface PaginatedIndustryGroupList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedIndustryGroupList
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedIndustryGroupList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedIndustryGroupList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<IndustryGroup>}
     * @memberof PaginatedIndustryGroupList
     */
    'results': Array<IndustryGroup>;
}
/**
 * 
 * @export
 * @interface PaginatedIndustryList
 */
export interface PaginatedIndustryList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedIndustryList
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedIndustryList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedIndustryList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<Industry>}
     * @memberof PaginatedIndustryList
     */
    'results': Array<Industry>;
}
/**
 * 
 * @export
 * @interface PaginatedSectorList
 */
export interface PaginatedSectorList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedSectorList
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedSectorList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedSectorList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<Sector>}
     * @memberof PaginatedSectorList
     */
    'results': Array<Sector>;
}
/**
 * 
 * @export
 * @interface PaginatedSourceList
 */
export interface PaginatedSourceList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedSourceList
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedSourceList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedSourceList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<Source>}
     * @memberof PaginatedSourceList
     */
    'results': Array<Source>;
}
/**
 * 
 * @export
 * @interface PaginatedSubIndustryList
 */
export interface PaginatedSubIndustryList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedSubIndustryList
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedSubIndustryList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedSubIndustryList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<SubIndustry>}
     * @memberof PaginatedSubIndustryList
     */
    'results': Array<SubIndustry>;
}
/**
 * Serializer for GICS Sector classification.
 * @export
 * @interface Sector
 */
export interface Sector {
    /**
     * GICS Sector code.
     * @type {string}
     * @memberof Sector
     */
    'code': string;
    /**
     * GICS Sector name.
     * @type {string}
     * @memberof Sector
     */
    'name': string;
}
/**
 * Serializer for Source model, representing the origin of the filing data.
 * @export
 * @interface Source
 */
export interface Source {
    /**
     * Name of the data source.
     * @type {string}
     * @memberof Source
     */
    'name': string;
    /**
     * URL of the data source homepage or relevant section.
     * @type {string}
     * @memberof Source
     */
    'url': string;
    /**
     * Description of the data source.
     * @type {string}
     * @memberof Source
     */
    'description': string;
}
/**
 * Serializer for GICS Sub-Industry classification, including its parent Industry.
 * @export
 * @interface SubIndustry
 */
export interface SubIndustry {
    /**
     * GICS Sub-Industry code.
     * @type {string}
     * @memberof SubIndustry
     */
    'code': string;
    /**
     * GICS Sub-Industry name.
     * @type {string}
     * @memberof SubIndustry
     */
    'name': string;
    /**
     * Parent GICS Industry.
     * @type {Industry}
     * @memberof SubIndustry
     */
    'industry': Industry;
}

/**
 * CompaniesApi - axios parameter creator
 * @export
 */
export const CompaniesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve a paginated list of companies.  Supports filtering via query parameters defined in the CompanyFilter and searching via the \'search\' parameter (searches name, ISINs, and LEI).
         * @param {string} [countries] Filter by Company country ISO Alpha-2 code(s). Comma-separated for multiple values (e.g., US,GB,DE).
         * @param {string} [industry] Filter by GICS Industry code.
         * @param {string} [industryGroup] Filter by GICS Industry Group code.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {string} [sector] Filter by GICS Sector code.
         * @param {string} [subIndustry] Filter by GICS Sub-Industry code.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesList: async (countries?: string, industry?: string, industryGroup?: string, page?: number, pageSize?: number, search?: string, sector?: string, subIndustry?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/companies/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required

            if (countries !== undefined) {
                localVarQueryParameter['countries'] = countries;
            }

            if (industry !== undefined) {
                localVarQueryParameter['industry'] = industry;
            }

            if (industryGroup !== undefined) {
                localVarQueryParameter['industry_group'] = industryGroup;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (sector !== undefined) {
                localVarQueryParameter['sector'] = sector;
            }

            if (subIndustry !== undefined) {
                localVarQueryParameter['sub_industry'] = subIndustry;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve detailed information for a single company by its ID.
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesRetrieve: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('companiesRetrieve', 'id', id)
            const localVarPath = `/companies/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CompaniesApi - functional programming interface
 * @export
 */
export const CompaniesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CompaniesApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieve a paginated list of companies.  Supports filtering via query parameters defined in the CompanyFilter and searching via the \'search\' parameter (searches name, ISINs, and LEI).
         * @param {string} [countries] Filter by Company country ISO Alpha-2 code(s). Comma-separated for multiple values (e.g., US,GB,DE).
         * @param {string} [industry] Filter by GICS Industry code.
         * @param {string} [industryGroup] Filter by GICS Industry Group code.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {string} [sector] Filter by GICS Sector code.
         * @param {string} [subIndustry] Filter by GICS Sub-Industry code.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companiesList(countries?: string, industry?: string, industryGroup?: string, page?: number, pageSize?: number, search?: string, sector?: string, subIndustry?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedCompanyList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companiesList(countries, industry, industryGroup, page, pageSize, search, sector, subIndustry, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CompaniesApi.companiesList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve detailed information for a single company by its ID.
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companiesRetrieve(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Company>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companiesRetrieve(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CompaniesApi.companiesRetrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CompaniesApi - factory interface
 * @export
 */
export const CompaniesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CompaniesApiFp(configuration)
    return {
        /**
         * Retrieve a paginated list of companies.  Supports filtering via query parameters defined in the CompanyFilter and searching via the \'search\' parameter (searches name, ISINs, and LEI).
         * @param {string} [countries] Filter by Company country ISO Alpha-2 code(s). Comma-separated for multiple values (e.g., US,GB,DE).
         * @param {string} [industry] Filter by GICS Industry code.
         * @param {string} [industryGroup] Filter by GICS Industry Group code.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {string} [sector] Filter by GICS Sector code.
         * @param {string} [subIndustry] Filter by GICS Sub-Industry code.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesList(countries?: string, industry?: string, industryGroup?: string, page?: number, pageSize?: number, search?: string, sector?: string, subIndustry?: string, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedCompanyList> {
            return localVarFp.companiesList(countries, industry, industryGroup, page, pageSize, search, sector, subIndustry, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve detailed information for a single company by its ID.
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesRetrieve(id: number, options?: RawAxiosRequestConfig): AxiosPromise<Company> {
            return localVarFp.companiesRetrieve(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CompaniesApi - object-oriented interface
 * @export
 * @class CompaniesApi
 * @extends {BaseAPI}
 */
export class CompaniesApi extends BaseAPI {
    /**
     * Retrieve a paginated list of companies.  Supports filtering via query parameters defined in the CompanyFilter and searching via the \'search\' parameter (searches name, ISINs, and LEI).
     * @param {string} [countries] Filter by Company country ISO Alpha-2 code(s). Comma-separated for multiple values (e.g., US,GB,DE).
     * @param {string} [industry] Filter by GICS Industry code.
     * @param {string} [industryGroup] Filter by GICS Industry Group code.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {string} [search] A search term.
     * @param {string} [sector] Filter by GICS Sector code.
     * @param {string} [subIndustry] Filter by GICS Sub-Industry code.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApi
     */
    public companiesList(countries?: string, industry?: string, industryGroup?: string, page?: number, pageSize?: number, search?: string, sector?: string, subIndustry?: string, options?: RawAxiosRequestConfig) {
        return CompaniesApiFp(this.configuration).companiesList(countries, industry, industryGroup, page, pageSize, search, sector, subIndustry, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve detailed information for a single company by its ID.
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApi
     */
    public companiesRetrieve(id: number, options?: RawAxiosRequestConfig) {
        return CompaniesApiFp(this.configuration).companiesRetrieve(id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * FilingTypesApi - axios parameter creator
 * @export
 */
export const FilingTypesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve a list of all available filing types.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filingTypesList: async (page?: number, pageSize?: number, search?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/filing-types/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve details for a single filing type by its primary key (likely ID, depends on model).
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filingTypesRetrieve: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('filingTypesRetrieve', 'id', id)
            const localVarPath = `/filing-types/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FilingTypesApi - functional programming interface
 * @export
 */
export const FilingTypesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FilingTypesApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieve a list of all available filing types.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async filingTypesList(page?: number, pageSize?: number, search?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedFilingTypeList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.filingTypesList(page, pageSize, search, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FilingTypesApi.filingTypesList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve details for a single filing type by its primary key (likely ID, depends on model).
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async filingTypesRetrieve(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FilingType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.filingTypesRetrieve(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FilingTypesApi.filingTypesRetrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * FilingTypesApi - factory interface
 * @export
 */
export const FilingTypesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FilingTypesApiFp(configuration)
    return {
        /**
         * Retrieve a list of all available filing types.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filingTypesList(page?: number, pageSize?: number, search?: string, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedFilingTypeList> {
            return localVarFp.filingTypesList(page, pageSize, search, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve details for a single filing type by its primary key (likely ID, depends on model).
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filingTypesRetrieve(id: number, options?: RawAxiosRequestConfig): AxiosPromise<FilingType> {
            return localVarFp.filingTypesRetrieve(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FilingTypesApi - object-oriented interface
 * @export
 * @class FilingTypesApi
 * @extends {BaseAPI}
 */
export class FilingTypesApi extends BaseAPI {
    /**
     * Retrieve a list of all available filing types.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {string} [search] A search term.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilingTypesApi
     */
    public filingTypesList(page?: number, pageSize?: number, search?: string, options?: RawAxiosRequestConfig) {
        return FilingTypesApiFp(this.configuration).filingTypesList(page, pageSize, search, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve details for a single filing type by its primary key (likely ID, depends on model).
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilingTypesApi
     */
    public filingTypesRetrieve(id: number, options?: RawAxiosRequestConfig) {
        return FilingTypesApiFp(this.configuration).filingTypesRetrieve(id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * FilingsApi - axios parameter creator
 * @export
 */
export const FilingsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve a paginated list of filings.  Supports filtering via query parameters defined in the FilingFilter, searching via the \'search\' parameter (searches company name and title), and ordering via the \'ordering\' parameter (allowed fields: release_datetime, added_to_platform).
         * @param {string} [addedToPlatformFrom] Filter by date added to platform (inclusive start date, YYYY-MM-DDTHH:MM:SSZ format).
         * @param {string} [addedToPlatformTo] Filter by date added to platform (inclusive end date, YYYY-MM-DDTHH:MM:SSZ format).
         * @param {number} [company] Filter by internal Company ID.
         * @param {string} [companyIsin] Filter by Company ISIN. Case-insensitive.
         * @param {string} [countries] Filter by Company country ISO Alpha-2 code(s). Comma-separated for multiple values (e.g., US,GB,DE).
         * @param {string} [disseminationDatetimeFrom] Filter by dissemination datetime (inclusive start, YYYY-MM-DDTHH:MM:SSZ format).
         * @param {string} [disseminationDatetimeTo] Filter by dissemination datetime (inclusive end, YYYY-MM-DDTHH:MM:SSZ format).
         * @param {string} [language] Filter by a single filing language ISO 639-1 code (e.g., en).
         * @param {string} [languages] Filter by filing language ISO 639-1 code(s). Comma-separated for multiple values (e.g., en,de).
         * @param {string} [lei] Filter by Company Legal Entity Identifier (LEI).
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [releaseDatetimeFrom] Filter by release datetime (inclusive start, YYYY-MM-DDTHH:MM:SSZ format).
         * @param {string} [releaseDatetimeTo] Filter by release datetime (inclusive end, YYYY-MM-DDTHH:MM:SSZ format).
         * @param {string} [search] A search term.
         * @param {number} [source] 
         * @param {string} [type] Filter by Filing Type code (e.g., ANNREP).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filingsList: async (addedToPlatformFrom?: string, addedToPlatformTo?: string, company?: number, companyIsin?: string, countries?: string, disseminationDatetimeFrom?: string, disseminationDatetimeTo?: string, language?: string, languages?: string, lei?: string, ordering?: string, page?: number, pageSize?: number, releaseDatetimeFrom?: string, releaseDatetimeTo?: string, search?: string, source?: number, type?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/filings/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required

            if (addedToPlatformFrom !== undefined) {
                localVarQueryParameter['added_to_platform_from'] = (addedToPlatformFrom as any instanceof Date) ?
                    (addedToPlatformFrom as any).toISOString() :
                    addedToPlatformFrom;
            }

            if (addedToPlatformTo !== undefined) {
                localVarQueryParameter['added_to_platform_to'] = (addedToPlatformTo as any instanceof Date) ?
                    (addedToPlatformTo as any).toISOString() :
                    addedToPlatformTo;
            }

            if (company !== undefined) {
                localVarQueryParameter['company'] = company;
            }

            if (companyIsin !== undefined) {
                localVarQueryParameter['company_isin'] = companyIsin;
            }

            if (countries !== undefined) {
                localVarQueryParameter['countries'] = countries;
            }

            if (disseminationDatetimeFrom !== undefined) {
                localVarQueryParameter['dissemination_datetime_from'] = (disseminationDatetimeFrom as any instanceof Date) ?
                    (disseminationDatetimeFrom as any).toISOString() :
                    disseminationDatetimeFrom;
            }

            if (disseminationDatetimeTo !== undefined) {
                localVarQueryParameter['dissemination_datetime_to'] = (disseminationDatetimeTo as any instanceof Date) ?
                    (disseminationDatetimeTo as any).toISOString() :
                    disseminationDatetimeTo;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (languages !== undefined) {
                localVarQueryParameter['languages'] = languages;
            }

            if (lei !== undefined) {
                localVarQueryParameter['lei'] = lei;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (releaseDatetimeFrom !== undefined) {
                localVarQueryParameter['release_datetime_from'] = (releaseDatetimeFrom as any instanceof Date) ?
                    (releaseDatetimeFrom as any).toISOString() :
                    releaseDatetimeFrom;
            }

            if (releaseDatetimeTo !== undefined) {
                localVarQueryParameter['release_datetime_to'] = (releaseDatetimeTo as any instanceof Date) ?
                    (releaseDatetimeTo as any).toISOString() :
                    releaseDatetimeTo;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (source !== undefined) {
                localVarQueryParameter['source'] = source;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve detailed information for a single filing by its ID.
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filingsRetrieve: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('filingsRetrieve', 'id', id)
            const localVarPath = `/filings/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FilingsApi - functional programming interface
 * @export
 */
export const FilingsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FilingsApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieve a paginated list of filings.  Supports filtering via query parameters defined in the FilingFilter, searching via the \'search\' parameter (searches company name and title), and ordering via the \'ordering\' parameter (allowed fields: release_datetime, added_to_platform).
         * @param {string} [addedToPlatformFrom] Filter by date added to platform (inclusive start date, YYYY-MM-DDTHH:MM:SSZ format).
         * @param {string} [addedToPlatformTo] Filter by date added to platform (inclusive end date, YYYY-MM-DDTHH:MM:SSZ format).
         * @param {number} [company] Filter by internal Company ID.
         * @param {string} [companyIsin] Filter by Company ISIN. Case-insensitive.
         * @param {string} [countries] Filter by Company country ISO Alpha-2 code(s). Comma-separated for multiple values (e.g., US,GB,DE).
         * @param {string} [disseminationDatetimeFrom] Filter by dissemination datetime (inclusive start, YYYY-MM-DDTHH:MM:SSZ format).
         * @param {string} [disseminationDatetimeTo] Filter by dissemination datetime (inclusive end, YYYY-MM-DDTHH:MM:SSZ format).
         * @param {string} [language] Filter by a single filing language ISO 639-1 code (e.g., en).
         * @param {string} [languages] Filter by filing language ISO 639-1 code(s). Comma-separated for multiple values (e.g., en,de).
         * @param {string} [lei] Filter by Company Legal Entity Identifier (LEI).
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [releaseDatetimeFrom] Filter by release datetime (inclusive start, YYYY-MM-DDTHH:MM:SSZ format).
         * @param {string} [releaseDatetimeTo] Filter by release datetime (inclusive end, YYYY-MM-DDTHH:MM:SSZ format).
         * @param {string} [search] A search term.
         * @param {number} [source] 
         * @param {string} [type] Filter by Filing Type code (e.g., ANNREP).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async filingsList(addedToPlatformFrom?: string, addedToPlatformTo?: string, company?: number, companyIsin?: string, countries?: string, disseminationDatetimeFrom?: string, disseminationDatetimeTo?: string, language?: string, languages?: string, lei?: string, ordering?: string, page?: number, pageSize?: number, releaseDatetimeFrom?: string, releaseDatetimeTo?: string, search?: string, source?: number, type?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedFilingList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.filingsList(addedToPlatformFrom, addedToPlatformTo, company, companyIsin, countries, disseminationDatetimeFrom, disseminationDatetimeTo, language, languages, lei, ordering, page, pageSize, releaseDatetimeFrom, releaseDatetimeTo, search, source, type, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FilingsApi.filingsList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve detailed information for a single filing by its ID.
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async filingsRetrieve(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Filing>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.filingsRetrieve(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FilingsApi.filingsRetrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * FilingsApi - factory interface
 * @export
 */
export const FilingsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FilingsApiFp(configuration)
    return {
        /**
         * Retrieve a paginated list of filings.  Supports filtering via query parameters defined in the FilingFilter, searching via the \'search\' parameter (searches company name and title), and ordering via the \'ordering\' parameter (allowed fields: release_datetime, added_to_platform).
         * @param {string} [addedToPlatformFrom] Filter by date added to platform (inclusive start date, YYYY-MM-DDTHH:MM:SSZ format).
         * @param {string} [addedToPlatformTo] Filter by date added to platform (inclusive end date, YYYY-MM-DDTHH:MM:SSZ format).
         * @param {number} [company] Filter by internal Company ID.
         * @param {string} [companyIsin] Filter by Company ISIN. Case-insensitive.
         * @param {string} [countries] Filter by Company country ISO Alpha-2 code(s). Comma-separated for multiple values (e.g., US,GB,DE).
         * @param {string} [disseminationDatetimeFrom] Filter by dissemination datetime (inclusive start, YYYY-MM-DDTHH:MM:SSZ format).
         * @param {string} [disseminationDatetimeTo] Filter by dissemination datetime (inclusive end, YYYY-MM-DDTHH:MM:SSZ format).
         * @param {string} [language] Filter by a single filing language ISO 639-1 code (e.g., en).
         * @param {string} [languages] Filter by filing language ISO 639-1 code(s). Comma-separated for multiple values (e.g., en,de).
         * @param {string} [lei] Filter by Company Legal Entity Identifier (LEI).
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [releaseDatetimeFrom] Filter by release datetime (inclusive start, YYYY-MM-DDTHH:MM:SSZ format).
         * @param {string} [releaseDatetimeTo] Filter by release datetime (inclusive end, YYYY-MM-DDTHH:MM:SSZ format).
         * @param {string} [search] A search term.
         * @param {number} [source] 
         * @param {string} [type] Filter by Filing Type code (e.g., ANNREP).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filingsList(addedToPlatformFrom?: string, addedToPlatformTo?: string, company?: number, companyIsin?: string, countries?: string, disseminationDatetimeFrom?: string, disseminationDatetimeTo?: string, language?: string, languages?: string, lei?: string, ordering?: string, page?: number, pageSize?: number, releaseDatetimeFrom?: string, releaseDatetimeTo?: string, search?: string, source?: number, type?: string, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedFilingList> {
            return localVarFp.filingsList(addedToPlatformFrom, addedToPlatformTo, company, companyIsin, countries, disseminationDatetimeFrom, disseminationDatetimeTo, language, languages, lei, ordering, page, pageSize, releaseDatetimeFrom, releaseDatetimeTo, search, source, type, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve detailed information for a single filing by its ID.
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filingsRetrieve(id: number, options?: RawAxiosRequestConfig): AxiosPromise<Filing> {
            return localVarFp.filingsRetrieve(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FilingsApi - object-oriented interface
 * @export
 * @class FilingsApi
 * @extends {BaseAPI}
 */
export class FilingsApi extends BaseAPI {
    /**
     * Retrieve a paginated list of filings.  Supports filtering via query parameters defined in the FilingFilter, searching via the \'search\' parameter (searches company name and title), and ordering via the \'ordering\' parameter (allowed fields: release_datetime, added_to_platform).
     * @param {string} [addedToPlatformFrom] Filter by date added to platform (inclusive start date, YYYY-MM-DDTHH:MM:SSZ format).
     * @param {string} [addedToPlatformTo] Filter by date added to platform (inclusive end date, YYYY-MM-DDTHH:MM:SSZ format).
     * @param {number} [company] Filter by internal Company ID.
     * @param {string} [companyIsin] Filter by Company ISIN. Case-insensitive.
     * @param {string} [countries] Filter by Company country ISO Alpha-2 code(s). Comma-separated for multiple values (e.g., US,GB,DE).
     * @param {string} [disseminationDatetimeFrom] Filter by dissemination datetime (inclusive start, YYYY-MM-DDTHH:MM:SSZ format).
     * @param {string} [disseminationDatetimeTo] Filter by dissemination datetime (inclusive end, YYYY-MM-DDTHH:MM:SSZ format).
     * @param {string} [language] Filter by a single filing language ISO 639-1 code (e.g., en).
     * @param {string} [languages] Filter by filing language ISO 639-1 code(s). Comma-separated for multiple values (e.g., en,de).
     * @param {string} [lei] Filter by Company Legal Entity Identifier (LEI).
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {string} [releaseDatetimeFrom] Filter by release datetime (inclusive start, YYYY-MM-DDTHH:MM:SSZ format).
     * @param {string} [releaseDatetimeTo] Filter by release datetime (inclusive end, YYYY-MM-DDTHH:MM:SSZ format).
     * @param {string} [search] A search term.
     * @param {number} [source] 
     * @param {string} [type] Filter by Filing Type code (e.g., ANNREP).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilingsApi
     */
    public filingsList(addedToPlatformFrom?: string, addedToPlatformTo?: string, company?: number, companyIsin?: string, countries?: string, disseminationDatetimeFrom?: string, disseminationDatetimeTo?: string, language?: string, languages?: string, lei?: string, ordering?: string, page?: number, pageSize?: number, releaseDatetimeFrom?: string, releaseDatetimeTo?: string, search?: string, source?: number, type?: string, options?: RawAxiosRequestConfig) {
        return FilingsApiFp(this.configuration).filingsList(addedToPlatformFrom, addedToPlatformTo, company, companyIsin, countries, disseminationDatetimeFrom, disseminationDatetimeTo, language, languages, lei, ordering, page, pageSize, releaseDatetimeFrom, releaseDatetimeTo, search, source, type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve detailed information for a single filing by its ID.
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilingsApi
     */
    public filingsRetrieve(id: number, options?: RawAxiosRequestConfig) {
        return FilingsApiFp(this.configuration).filingsRetrieve(id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * IndustriesApi - axios parameter creator
 * @export
 */
export const IndustriesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve a list of all available GICS Industries. Can be filtered by parent industry group ID.
         * @param {number} [industryGroup] 
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        industriesList: async (industryGroup?: number, page?: number, pageSize?: number, search?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/industries/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required

            if (industryGroup !== undefined) {
                localVarQueryParameter['industry_group'] = industryGroup;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve details for a single GICS Industry by its primary key.
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        industriesRetrieve: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('industriesRetrieve', 'id', id)
            const localVarPath = `/industries/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * IndustriesApi - functional programming interface
 * @export
 */
export const IndustriesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = IndustriesApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieve a list of all available GICS Industries. Can be filtered by parent industry group ID.
         * @param {number} [industryGroup] 
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async industriesList(industryGroup?: number, page?: number, pageSize?: number, search?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedIndustryList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.industriesList(industryGroup, page, pageSize, search, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IndustriesApi.industriesList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve details for a single GICS Industry by its primary key.
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async industriesRetrieve(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Industry>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.industriesRetrieve(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IndustriesApi.industriesRetrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * IndustriesApi - factory interface
 * @export
 */
export const IndustriesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = IndustriesApiFp(configuration)
    return {
        /**
         * Retrieve a list of all available GICS Industries. Can be filtered by parent industry group ID.
         * @param {number} [industryGroup] 
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        industriesList(industryGroup?: number, page?: number, pageSize?: number, search?: string, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedIndustryList> {
            return localVarFp.industriesList(industryGroup, page, pageSize, search, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve details for a single GICS Industry by its primary key.
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        industriesRetrieve(id: number, options?: RawAxiosRequestConfig): AxiosPromise<Industry> {
            return localVarFp.industriesRetrieve(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * IndustriesApi - object-oriented interface
 * @export
 * @class IndustriesApi
 * @extends {BaseAPI}
 */
export class IndustriesApi extends BaseAPI {
    /**
     * Retrieve a list of all available GICS Industries. Can be filtered by parent industry group ID.
     * @param {number} [industryGroup] 
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {string} [search] A search term.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IndustriesApi
     */
    public industriesList(industryGroup?: number, page?: number, pageSize?: number, search?: string, options?: RawAxiosRequestConfig) {
        return IndustriesApiFp(this.configuration).industriesList(industryGroup, page, pageSize, search, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve details for a single GICS Industry by its primary key.
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IndustriesApi
     */
    public industriesRetrieve(id: number, options?: RawAxiosRequestConfig) {
        return IndustriesApiFp(this.configuration).industriesRetrieve(id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * IndustryGroupsApi - axios parameter creator
 * @export
 */
export const IndustryGroupsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve a list of all available GICS Industry Groups. Can be filtered by parent sector ID.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {number} [sector] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        industryGroupsList: async (page?: number, pageSize?: number, search?: string, sector?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/industry-groups/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (sector !== undefined) {
                localVarQueryParameter['sector'] = sector;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve details for a single GICS Industry Group by its primary key.
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        industryGroupsRetrieve: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('industryGroupsRetrieve', 'id', id)
            const localVarPath = `/industry-groups/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * IndustryGroupsApi - functional programming interface
 * @export
 */
export const IndustryGroupsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = IndustryGroupsApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieve a list of all available GICS Industry Groups. Can be filtered by parent sector ID.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {number} [sector] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async industryGroupsList(page?: number, pageSize?: number, search?: string, sector?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedIndustryGroupList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.industryGroupsList(page, pageSize, search, sector, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IndustryGroupsApi.industryGroupsList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve details for a single GICS Industry Group by its primary key.
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async industryGroupsRetrieve(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IndustryGroup>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.industryGroupsRetrieve(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IndustryGroupsApi.industryGroupsRetrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * IndustryGroupsApi - factory interface
 * @export
 */
export const IndustryGroupsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = IndustryGroupsApiFp(configuration)
    return {
        /**
         * Retrieve a list of all available GICS Industry Groups. Can be filtered by parent sector ID.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {number} [sector] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        industryGroupsList(page?: number, pageSize?: number, search?: string, sector?: number, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedIndustryGroupList> {
            return localVarFp.industryGroupsList(page, pageSize, search, sector, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve details for a single GICS Industry Group by its primary key.
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        industryGroupsRetrieve(id: number, options?: RawAxiosRequestConfig): AxiosPromise<IndustryGroup> {
            return localVarFp.industryGroupsRetrieve(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * IndustryGroupsApi - object-oriented interface
 * @export
 * @class IndustryGroupsApi
 * @extends {BaseAPI}
 */
export class IndustryGroupsApi extends BaseAPI {
    /**
     * Retrieve a list of all available GICS Industry Groups. Can be filtered by parent sector ID.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {string} [search] A search term.
     * @param {number} [sector] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IndustryGroupsApi
     */
    public industryGroupsList(page?: number, pageSize?: number, search?: string, sector?: number, options?: RawAxiosRequestConfig) {
        return IndustryGroupsApiFp(this.configuration).industryGroupsList(page, pageSize, search, sector, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve details for a single GICS Industry Group by its primary key.
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IndustryGroupsApi
     */
    public industryGroupsRetrieve(id: number, options?: RawAxiosRequestConfig) {
        return IndustryGroupsApiFp(this.configuration).industryGroupsRetrieve(id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SchemaApi - axios parameter creator
 * @export
 */
export const SchemaApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * OpenApi3 schema for this API. Format can be selected via content negotiation.  - YAML: application/vnd.oai.openapi - JSON: application/vnd.oai.openapi+json
         * @param {SchemaRetrieveFormatEnum} [format] 
         * @param {SchemaRetrieveLangEnum} [lang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schemaRetrieve: async (format?: SchemaRetrieveFormatEnum, lang?: SchemaRetrieveLangEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/schema/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required

            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            if (lang !== undefined) {
                localVarQueryParameter['lang'] = lang;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SchemaApi - functional programming interface
 * @export
 */
export const SchemaApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SchemaApiAxiosParamCreator(configuration)
    return {
        /**
         * OpenApi3 schema for this API. Format can be selected via content negotiation.  - YAML: application/vnd.oai.openapi - JSON: application/vnd.oai.openapi+json
         * @param {SchemaRetrieveFormatEnum} [format] 
         * @param {SchemaRetrieveLangEnum} [lang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async schemaRetrieve(format?: SchemaRetrieveFormatEnum, lang?: SchemaRetrieveLangEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: any; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.schemaRetrieve(format, lang, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SchemaApi.schemaRetrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SchemaApi - factory interface
 * @export
 */
export const SchemaApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SchemaApiFp(configuration)
    return {
        /**
         * OpenApi3 schema for this API. Format can be selected via content negotiation.  - YAML: application/vnd.oai.openapi - JSON: application/vnd.oai.openapi+json
         * @param {SchemaRetrieveFormatEnum} [format] 
         * @param {SchemaRetrieveLangEnum} [lang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schemaRetrieve(format?: SchemaRetrieveFormatEnum, lang?: SchemaRetrieveLangEnum, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: any; }> {
            return localVarFp.schemaRetrieve(format, lang, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SchemaApi - object-oriented interface
 * @export
 * @class SchemaApi
 * @extends {BaseAPI}
 */
export class SchemaApi extends BaseAPI {
    /**
     * OpenApi3 schema for this API. Format can be selected via content negotiation.  - YAML: application/vnd.oai.openapi - JSON: application/vnd.oai.openapi+json
     * @param {SchemaRetrieveFormatEnum} [format] 
     * @param {SchemaRetrieveLangEnum} [lang] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemaApi
     */
    public schemaRetrieve(format?: SchemaRetrieveFormatEnum, lang?: SchemaRetrieveLangEnum, options?: RawAxiosRequestConfig) {
        return SchemaApiFp(this.configuration).schemaRetrieve(format, lang, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const SchemaRetrieveFormatEnum = {
    Json: 'json',
    Yaml: 'yaml'
} as const;
export type SchemaRetrieveFormatEnum = typeof SchemaRetrieveFormatEnum[keyof typeof SchemaRetrieveFormatEnum];
/**
 * @export
 */
export const SchemaRetrieveLangEnum = {
    Af: 'af',
    Ar: 'ar',
    ArDz: 'ar-dz',
    Ast: 'ast',
    Az: 'az',
    Be: 'be',
    Bg: 'bg',
    Bn: 'bn',
    Br: 'br',
    Bs: 'bs',
    Ca: 'ca',
    Ckb: 'ckb',
    Cs: 'cs',
    Cy: 'cy',
    Da: 'da',
    De: 'de',
    Dsb: 'dsb',
    El: 'el',
    En: 'en',
    EnAu: 'en-au',
    EnGb: 'en-gb',
    Eo: 'eo',
    Es: 'es',
    EsAr: 'es-ar',
    EsCo: 'es-co',
    EsMx: 'es-mx',
    EsNi: 'es-ni',
    EsVe: 'es-ve',
    Et: 'et',
    Eu: 'eu',
    Fa: 'fa',
    Fi: 'fi',
    Fr: 'fr',
    Fy: 'fy',
    Ga: 'ga',
    Gd: 'gd',
    Gl: 'gl',
    He: 'he',
    Hi: 'hi',
    Hr: 'hr',
    Hsb: 'hsb',
    Hu: 'hu',
    Hy: 'hy',
    Ia: 'ia',
    Id: 'id',
    Ig: 'ig',
    Io: 'io',
    Is: 'is',
    It: 'it',
    Ja: 'ja',
    Ka: 'ka',
    Kab: 'kab',
    Kk: 'kk',
    Km: 'km',
    Kn: 'kn',
    Ko: 'ko',
    Ky: 'ky',
    Lb: 'lb',
    Lt: 'lt',
    Lv: 'lv',
    Mk: 'mk',
    Ml: 'ml',
    Mn: 'mn',
    Mr: 'mr',
    Ms: 'ms',
    My: 'my',
    Nb: 'nb',
    Ne: 'ne',
    Nl: 'nl',
    Nn: 'nn',
    Os: 'os',
    Pa: 'pa',
    Pl: 'pl',
    Pt: 'pt',
    PtBr: 'pt-br',
    Ro: 'ro',
    Ru: 'ru',
    Sk: 'sk',
    Sl: 'sl',
    Sq: 'sq',
    Sr: 'sr',
    SrLatn: 'sr-latn',
    Sv: 'sv',
    Sw: 'sw',
    Ta: 'ta',
    Te: 'te',
    Tg: 'tg',
    Th: 'th',
    Tk: 'tk',
    Tr: 'tr',
    Tt: 'tt',
    Udm: 'udm',
    Uk: 'uk',
    Ur: 'ur',
    Uz: 'uz',
    Vi: 'vi',
    ZhHans: 'zh-hans',
    ZhHant: 'zh-hant'
} as const;
export type SchemaRetrieveLangEnum = typeof SchemaRetrieveLangEnum[keyof typeof SchemaRetrieveLangEnum];


/**
 * SectorsApi - axios parameter creator
 * @export
 */
export const SectorsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve a list of all available GICS Sectors.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sectorsList: async (page?: number, pageSize?: number, search?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sectors/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve details for a single GICS Sector by its primary key.
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sectorsRetrieve: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('sectorsRetrieve', 'id', id)
            const localVarPath = `/sectors/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SectorsApi - functional programming interface
 * @export
 */
export const SectorsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SectorsApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieve a list of all available GICS Sectors.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sectorsList(page?: number, pageSize?: number, search?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedSectorList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sectorsList(page, pageSize, search, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SectorsApi.sectorsList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve details for a single GICS Sector by its primary key.
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sectorsRetrieve(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Sector>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sectorsRetrieve(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SectorsApi.sectorsRetrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SectorsApi - factory interface
 * @export
 */
export const SectorsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SectorsApiFp(configuration)
    return {
        /**
         * Retrieve a list of all available GICS Sectors.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sectorsList(page?: number, pageSize?: number, search?: string, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedSectorList> {
            return localVarFp.sectorsList(page, pageSize, search, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve details for a single GICS Sector by its primary key.
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sectorsRetrieve(id: number, options?: RawAxiosRequestConfig): AxiosPromise<Sector> {
            return localVarFp.sectorsRetrieve(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SectorsApi - object-oriented interface
 * @export
 * @class SectorsApi
 * @extends {BaseAPI}
 */
export class SectorsApi extends BaseAPI {
    /**
     * Retrieve a list of all available GICS Sectors.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {string} [search] A search term.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SectorsApi
     */
    public sectorsList(page?: number, pageSize?: number, search?: string, options?: RawAxiosRequestConfig) {
        return SectorsApiFp(this.configuration).sectorsList(page, pageSize, search, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve details for a single GICS Sector by its primary key.
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SectorsApi
     */
    public sectorsRetrieve(id: number, options?: RawAxiosRequestConfig) {
        return SectorsApiFp(this.configuration).sectorsRetrieve(id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SourcesApi - axios parameter creator
 * @export
 */
export const SourcesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve a list of all available data sources.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sourcesList: async (page?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sources/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve details for a single data source by its primary key.
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sourcesRetrieve: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('sourcesRetrieve', 'id', id)
            const localVarPath = `/sources/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SourcesApi - functional programming interface
 * @export
 */
export const SourcesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SourcesApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieve a list of all available data sources.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sourcesList(page?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedSourceList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sourcesList(page, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SourcesApi.sourcesList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve details for a single data source by its primary key.
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sourcesRetrieve(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Source>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sourcesRetrieve(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SourcesApi.sourcesRetrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SourcesApi - factory interface
 * @export
 */
export const SourcesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SourcesApiFp(configuration)
    return {
        /**
         * Retrieve a list of all available data sources.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sourcesList(page?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedSourceList> {
            return localVarFp.sourcesList(page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve details for a single data source by its primary key.
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sourcesRetrieve(id: number, options?: RawAxiosRequestConfig): AxiosPromise<Source> {
            return localVarFp.sourcesRetrieve(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SourcesApi - object-oriented interface
 * @export
 * @class SourcesApi
 * @extends {BaseAPI}
 */
export class SourcesApi extends BaseAPI {
    /**
     * Retrieve a list of all available data sources.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesApi
     */
    public sourcesList(page?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return SourcesApiFp(this.configuration).sourcesList(page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve details for a single data source by its primary key.
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesApi
     */
    public sourcesRetrieve(id: number, options?: RawAxiosRequestConfig) {
        return SourcesApiFp(this.configuration).sourcesRetrieve(id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SubIndustriesApi - axios parameter creator
 * @export
 */
export const SubIndustriesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve a list of all available GICS Sub-Industries. Can be filtered by parent industry ID.
         * @param {number} [industry] 
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subIndustriesList: async (industry?: number, page?: number, pageSize?: number, search?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sub-industries/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required

            if (industry !== undefined) {
                localVarQueryParameter['industry'] = industry;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve details for a single GICS Sub-Industry by its primary key.
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subIndustriesRetrieve: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('subIndustriesRetrieve', 'id', id)
            const localVarPath = `/sub-industries/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SubIndustriesApi - functional programming interface
 * @export
 */
export const SubIndustriesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SubIndustriesApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieve a list of all available GICS Sub-Industries. Can be filtered by parent industry ID.
         * @param {number} [industry] 
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subIndustriesList(industry?: number, page?: number, pageSize?: number, search?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedSubIndustryList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.subIndustriesList(industry, page, pageSize, search, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SubIndustriesApi.subIndustriesList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve details for a single GICS Sub-Industry by its primary key.
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subIndustriesRetrieve(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubIndustry>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.subIndustriesRetrieve(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SubIndustriesApi.subIndustriesRetrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SubIndustriesApi - factory interface
 * @export
 */
export const SubIndustriesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SubIndustriesApiFp(configuration)
    return {
        /**
         * Retrieve a list of all available GICS Sub-Industries. Can be filtered by parent industry ID.
         * @param {number} [industry] 
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subIndustriesList(industry?: number, page?: number, pageSize?: number, search?: string, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedSubIndustryList> {
            return localVarFp.subIndustriesList(industry, page, pageSize, search, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve details for a single GICS Sub-Industry by its primary key.
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subIndustriesRetrieve(id: number, options?: RawAxiosRequestConfig): AxiosPromise<SubIndustry> {
            return localVarFp.subIndustriesRetrieve(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SubIndustriesApi - object-oriented interface
 * @export
 * @class SubIndustriesApi
 * @extends {BaseAPI}
 */
export class SubIndustriesApi extends BaseAPI {
    /**
     * Retrieve a list of all available GICS Sub-Industries. Can be filtered by parent industry ID.
     * @param {number} [industry] 
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {string} [search] A search term.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubIndustriesApi
     */
    public subIndustriesList(industry?: number, page?: number, pageSize?: number, search?: string, options?: RawAxiosRequestConfig) {
        return SubIndustriesApiFp(this.configuration).subIndustriesList(industry, page, pageSize, search, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve details for a single GICS Sub-Industry by its primary key.
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubIndustriesApi
     */
    public subIndustriesRetrieve(id: number, options?: RawAxiosRequestConfig) {
        return SubIndustriesApiFp(this.configuration).subIndustriesRetrieve(id, options).then((request) => request(this.axios, this.basePath));
    }
}



